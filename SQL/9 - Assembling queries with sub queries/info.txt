SUBQUERIES:-

Table:- products
id      name        department      price       
1       a           TOYS             100  
6       x           TOYS             50       
2       b           outdoors         200
3       c           home              10
4       d           tools            300   

Q1. List the name and price of all products that are more expensive than all products in TOYS department:-
(from the above table we have to find 200 and 300 as 100+50 < 200 and 300)
    select name, price FROM products 
    WHERE price > (
        select sum(price) FROM products WHERE dept = 'toys'
    )
To write subqueries, we enclose them in (). 
we can use subqueries as a source of values (like tablename), source of rows, source of column.
eg- 
    select name,
        (select count(name) from products)
    from (select * from products) as p1
    join (select * from products) as p2 on p1.id = p2.id
    where p1.id in (select id from products)

oh boyyyy! This looks unreadable. subqueries can be complex as we can embed them into so many places. 

Lets understand this one by one:-
- Understanding the shape of a query result is the KEY!

select * from orders   ----->    many rows and many columns   // all rows and columns
select id from orders  ----->    many rows, one column    // id column with values
select count(*) from orders -----> one row, one column (single value)    // 550


In our select statement, we can use a query that results into a single value only.
eg-
    select count(max) from products
    select price from products where id = 3   // assuming ids are unique and 3 exists.
we can add these statements in our select statement as a subquery as they'll result in a single value only.
eg-
    select name, price, (
        select count(id) from products
    ) from products

    result:-
    name	price	count
    a1	    100	    5
    a2	    300	    5
    a3	    500	    5
    a4	    400 	5
    a5	    150	    5

here, the count will be same for all records. it might doesnt make sense now, but thats how it works.
one more eg- using as for a subquery

    select name, price, (
        select price from products where id = 3
    ) AS price_id from products

    result:-
    name	price	price_id
    a1	    100	    500
    a2	    300	    500
    a3	    500	    500
    a4	    400	    500
    a5	    150	    500


=> Placing subquery in a from clause:-
- It could be any query as long as its compatible with the outer query. we can return one value, or one column and many rows or many rows and many columns, any query is accepted. 
- The from clause subquery should have an alias.
    select name, price_weight_ratio FROM 
    (
         select name, price/weight as price_weight_ratio FROM products
    ) As p
    where price_weight_ratio > 25;
Here, the result of the subquery is the table for our outerquery. so we can ask for name and price_weight_ratio column only, as thats what we are passing out. We can ask for columns like only price, weight, etc. that exists in products but not in the select statement of our subquery, also same applies to where clause.
In short, in case of from clause, the inner subquery is the source of data for outer query.

More example:-
// one value as source
    select * FROM (
        select max(price) FROM products
    ) as P

    result:- 100 (maxvalue)


Q1. Find the avg number of orders for all users:-
Note, in orders table we might have same user multiple times, ofcourse a user can make many orders. so we cant just calculate all and divide it by total no. of orders.

    select sum(orderValue) / count(user_id) FROM (
        select user_id, count(*) as orderValue
            FROM orders group BY user_id
        ) 
    AS OrderTable

// OR WE CAN USE AVG BUILT IN FUNCTION- 

    select AVG(orderValue) FROM (
        select user_id, count(*) as orderValue
            FROM orders group BY user_id
        )
     AS OrderTable
    
    The result is same:- 11


Q2. Calculate avg price of phones of each manufacturer and the print the highest avg price.
    select Max(avg_price) as max_avg_price 
    FROM (
        select manufacturer,
        avg(price) as avg_price
        FROM phones group BY manufacturer
    ) 
    as phoneTable



=> Using subquery with JOIN clause:-
- Any subquery as long as its compatible with the ON clause of JOIN statement.

Q. Find the first_name from users where product_id = 3
    select first_name FROM users
    JOIN(
        select user_id FROM orders WHERE product_id = 3
        ) as orderTable
    on orderTable.user_id = users.id


=> Using subqueries with WHERE clause:-
The best usecase of subqueries is when we use it with a where clause.
The structure of subquery depends upon what we are using with our where clause, like In, Not In, <, >, etc.

example with IN operator - we need a single column with multiple rows for IN operator:-
    select id FROM orders
    WHERE product_id in 
    (
        select id FROM products WHERE price / weight > 300
    )

=> A table of structure of result we need with operators inside a where clause:-

OPERATORS       STRUCTURE 
>                   single value
<                   single value
>=                  single value
<=                  single value
=                   single value
<> or !=            single value
IN                  single column
NOT IN              single column    
>all/some/any       single column
<all/some/any       single column
>=all/some/any      single column
<=all/some/any      single column
=all/some/any       single column
<>all/some/any      single column


Examples of where clause:-


Q. Print name of all phones that have a price higher than the avg price of all phones
    // greater than keyword - need single value
    select name FROM products WHERE price > (
        select avg(price) FROM products
    )

Q. Print name and price of phones that have a price greater than 'p4' phone
    select name, price FROM phones WHERE price > (
        select price FROM phones WHERE name = 'p4'  
    )

Q. Print name of all products that are not in the same department as products with a price less than 100.
    select name FROM products WHERE department Not in (
        select department FROM products WHERE price < 100
    )


=> More where operators:-
- ALL: It check if a value if greater/less.. than all the values in a list. eg- price > ALL avg_price

Q. Find name, department, price of all products whose price is greater than all products  of industrial department.
    select name, department, price FROM products WHERE price > ALL (
        select price FROM products WHERE department = 'Industrial'
    )
We can use all with >, <, >=, <=, =, <> opertaors.
Note: ALL expects a single column as a source of data, so make sure your subquery returns that.


- SOME: Some is an alias of ANY. both of them works. 
lets say, 50 > some (20, 100)
evaluated to true. Some basically checks if atleast one of the value in the list matches the condition, here 20 does.

Q. Show the name of products that are more expensive than at least one products in the industrial department.
    select name, department, price FROM products WHERE price > some (	
        select price FROM products WHERE department = 'Industrial'
    )

Q. Show the name of phones that have a price greater than any phone of samsung
    select name FROM phones WHERE price > SOME  (	
        select price FROM phones WHERE manufacturer = 'samsung'
    ) AND manufacturer != 'samsung'


=> Correlated subqueries:-
Where we use the values of outer query inside the subquery using the alias.
Lets take an example directly:-

Q. Show the name, department, price of the most expensive product in each department.
(Means show the most expensive product of each department)
    select name, department, price FROM products as P1
    WHERE p1.price = (
        select max(price) FROM products as p2 
        WHERE p2.department = p1.department
    )

Ohhhhkayyyyy! Thats unreadable.
Lets go one by one.
- When we use subqueries, it means that we have 2 for loops. just like one outer loop and one inside loop (i,j like)
so we can use the outer loops variable inside the subquery like we are doing in the above answer. Wherein we have stored the products table for outer loop in p1 and products table for inner loop in p2. 
And thats how we are comparing each department and finding the max out of it. (We could do this with group by also, but I was unable to get the other columns using group by as we can only fetch the grouped by coulumn.)

Q. Without using a join or a group by, print the number of orders for each product.
    select p1.name, (
        select count(*) FROM orders as o1 WHERE o1.product_id = p1.id
    ) FROM products as p1


=> A select without from:-
    select (select max(price) from products);

We can have a select only if we have a subquery that returns 1 single value, note only 1 single value.
some more realistic eg:-
    select 
        (select max(price) from products) / 
        (select avg(price) FROM products)
    
    select 
        (select max(price) from products), 
        (select avg(price) FROM products)

    select 
        (select max(price) FROM phones) as max_price,
        (select min(price) FROM phones) as min_price,
        (select avg(price) FROM phones) as avg_price


