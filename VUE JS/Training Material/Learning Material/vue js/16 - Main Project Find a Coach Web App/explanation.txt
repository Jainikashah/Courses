Project -

Point: There's nothing like the perfect blueprint for a Project. While you're going on with the development, a lot of stuff will enter and few will leave too. But having a clear road in the beginning will help you move ahead, in times when you dont know where to start.

e.g of a Find a coach web app:

1. Planning : 
    a. Define all the key features 
    b. Derive Vuex store layout. What data/state has to be stored inside the vuex and their actions and mutations.
    c. Derive design and components layout. The connections between these components and what pages we might want.


1.1 Data: 
    i) Coaches => list of coaches, COACH (id, firstname, lastname, description, rate)
    ii) Requests => list of requests, REQUEST(coachId, message, email Id)

    getters : getCoaches, getRequests
    mutations : setCoaches, registerCoach, contactCoach, setRequest


1.2 Layout: 
    i) Routes =>
        /coaches  = list of coaches
        /coaches/:id = specific coach details
        /register = register a new coach
        /contact = contact coach form
        /requests = all incoming requests received

    ii) Headers => Coaches | Requests
    iii) Layout of all pages we'll create.


1.3 Decide the packages we need : vue-router, vuex, bootstrap-vue, lodash, etc.



2. Steps/Decsription of entire Project-
  - Always decide the flow of data, before you start coding. Maybe a flowchart with how the data will flow.
    e.g. which state needs id, to move data from and to. 
  - Create the directory structure, including all the sub-folders.
  - Start with routes, define all the routes. dont forget / homeroute and /:notFound(.*) route, maybe add children for specific routes.
  - Create components and give headings to them and sub-titles for each section of a component.
  - Add global styling : inside app.vue
  - Wire up all the components using links and navbars. Create entire static layout(pages) of the app.
  - Create store, its modules, sub folders and then the states, mutations and...
  - Remember: components are reusable pieces of code, so create components wherever needed. Dont just write everything in one file, separate it out wisely. e.g for coaches-cards, buttons, navbars, headings, etc.
  - Instead of storing entire user as loggedInUser, just store its uniqueId OR TOKEN and then with that token, access its data from db. 

3. Notes-

Router:
    Router replace vs Router push: Router replace and push both does the same thing, both navigates us to another page.
    But, with replace, we cannot go back to the previous page, with push we can.
    e.g.- this.$router.replace('/all-courses')
    use replace more when there's a form and after that some other page will replace it. 

validations: 
    To have validations on form inputs, have data properties of them as object.
    e.g.- return { firstname: {value: '', isValid: true} }
    and have a isFormValid property, which will be false if any of input is wrong.
    
    To get red borders: <div id="firstname" :class="{invalid: !firstname.isValid}">
    the above class will applied only if the value is invalid.
    Its an easy way of doing validations on each input.

DB: 
    use firebase as database, because it doesnt need any server side code to write and its very easy to use. 

Error handling:
  code:
  // In error-occuring function (e.g. in api call function)
    if(!Response.ok){
        const error = new Error("error msg");
        throw error
    }   

  // In above function call place
  try{
      ...
  } catch(error){
      this.error = error.message
  }


Extra:
- To get a boolean value out of a value(like string, no., etc), use  double exclamation. 
    code: 
    :show = "!!propName"

If propName is a string, or any truthy value, it will return true else for all falsy values, it will return false.


- To get unique userID that is generated by firebase:
 const res = fetch(..., {
     method: 'POST', body: JSON.stringify(...)
 });
 
 data.id = res.name // the name holds the unique id generated by firebase.









    