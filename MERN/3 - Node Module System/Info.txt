- Require is like import. Where the code of that file is run & the return value is passed in imported module. Require is not a js feature. Its a node js built in function. With require, we can import third party packages of developers.

eg - 
    const request = require("http");


=> Code for require function for an http request    
    const http = require('https');
    const req = http.request('https://www.google.com', res => {
        res.on('data', (chunk) => {
            console.log("chunks", chunk);
        // console.log("chunkssss: ", chunk.toString())    // to get the data in string format

        })
        res.on('end', () => {
            console.log("no more data");
        })
    })
    req.end()

- Here, we require http or https. And http has a request method that takes url as first param and a callback to run after that. res param has the result of the url. res.on is an event emitter with name 'data' it returns the chunks of data. If the res size is bigger than it creates multiple chunks. res.on('end') runs when there's no more code to run in that block. 
We have store the entire http.request thing in a const req, because it necessary to have a req.end() function at the end in order to run your function.
note- if you use http, then use http in require function also.
https keeps the data encyrpted when its send from our machine to google server.

=> Modern way of requiring modules:-
    const { request } = require('https');
    const req = request(....)

=> Get method of https:-
Its same as request, but we use it when we only to get data from server and not send anything back. In this, there's no need to have .end() to call at the end
    const { get } = require('https');
    get('https://www.google.com', res => {
        res.on('data', (chunk) => {
            console.log("chunks", chunk);
        })
        res.on('end', () => {
            console.log("no more data");
        })
    })


=> Why use modules? (talking abt node modules here)
- Reuse exisiting code
- Organzie your code
- Expose only whats needed (While using request function, we only called it, we dont have to go through how its working and all. Just call it and use it. As that function exposes only what is needed to us in other modules.) 


=> Import/export:-
- while importing, no need to write .js at the end. node by default first looks for .js file, then .json files.
To see that in node runtime, run below cmd:
    node
    require.extensions

- To export a function:-
    function send(url, data){
        console.log(`Sending ${encrypt(data)} to ${url}`)
    }
    module.exports = {
        send
    }

- 2nd way to export a function:-
    module.exports.send = function send() {...}
    
- 3rd way to export a function:-
    module.exports = function send() {...}
    // by default one.

- To import a function:-
    const { send } = require('./request')


=> ES6 way of import/export:-
    import * from "./request";
    export const fun = () => {..}

IMP - Node by default uses commonJS way (that require way) of importing modules for backwards comaptability (means, a lot of projects uses commonJs even now in node). And so if we want to use ES6 way of importing & exporting, we either have to make changes in package.json or renames file with .mjs extension. Look at the code files to know how. m stands for module.
Note, we also need to make changes in our import statement, as of now, node doesnt take mjs file extension as default. Remember, earlier node would take the default extension as .js, not the case with .mjs
run the code as - node filename.mjs


=> Module caching:-
- Once a module is imported , node doesnt read it again if we import it twice.
To check - write a console statement in a file x, import x in another file. Here, write import statement twice and see that console will be printed only once. Why because node caches modules that we import. To check - console.log(require.cache). In this you'll see all modules that are imported and whether they were loaded before or not.


=> index.js:-
Its the file that node by default look for in a folder. Lets say I have a folder z. It contains an index.js file. We can import it like this - require('./z) and this will point to index.js file. Is it preferrable? Nope, not really by the instructor.
To know why - https://nodejs.org/api/modules.html#modules_all_together
Basically, it takes time internally for node to find out without the full path. The code written for the same, where it finds the module, is pretty long and complex. Even ryan dahl regrets it.
Watch the video - 10regrets of ryan dahl video for node.
Good for interviews.